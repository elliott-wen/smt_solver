  # ----------------------------
        # Keep all original call_apply cases
        # ----------------------------
        if fn_name == "_ZN2at5emptyEN3c108ArrayRefIlEENS0_13TensorOptionsESt8optionalINS0_12MemoryFormatEE":
            print(ops[0])
            return self.empty_tensor(self.build_expr(ops[0]))

        if fn_name == "_ZNK3c1010MaybeOwnedIN2at6TensorEEptEv":
            return self.build_expr(ops[0])

        if fn_name == "_ZN2at6TensorC2Ev":
            logging.warning("Use _ZN2at6TensorC2Ev")
            return Const("tensor_alloca", bm.TensorSort)


        if fn_name == "_ZN2at20isTensorSubclassLikeERKNS_6TensorE":
            return BoolVal(True)

        if fn_name == "_ZN3c1014isFloatingTypeENS_10ScalarTypeE":
            return is_fp(self.build_expr(ops[0]))

        if fn_name == "_ZN2at14TensorIterator20borrowing_nullary_opERKNS_10TensorBaseE":
            return self.build_expr(ops[0])

        if fn_name == "_ZNK2at10TensorBase9has_namesEv":
            # Bad implementation
            return BoolVal(False)

        if fn_name == "llvm.memcpy.p0.p0.i64":
            return self.build_expr(ops[0])

        if fn_name == "_ZNK3c106Device6is_cpuEv":
            return BoolVal(True)

        if fn_name == "_ZN9__gnu_cxxneIPN2at6TensorESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_":
            return BoolVal(True)

        if fn_name == "_ZN3c108ArrayRefIlEC2ISaIlEEERKSt6vectorIlT_E":
            return self.build_expr(ops[0])


        if fn_name in ("_ZNKSt6vectorIlSaIlEE4sizeEv", "_ZNK3c108ArrayRefIlE4sizeEv"):
            return Length(self.build_expr(ops[0]))

        if fn_name == "_ZNK3c106DeviceeqERKS0_":
            return self.build_expr(ops[0]) == self.build_expr(ops[1])

        if fn_name == "_ZN3c10eqEN6caffe28TypeMetaENS_10ScalarTypeE":
            return self.build_expr(ops[0]) == self.build_expr(ops[1])

        if fn_name == "_ZN6detail11scalar_typeEN3c1010ScalarTypeE":
            return self.build_expr(ops[0])

        if fn_name == "_ZNK2at10TensorBase5numelEv":
            return bm.Numel(self.build_expr(ops[0]))

        if fn_name in ("_ZN2at6TensorC2ERKS0_", "_ZNR2at6TensoraSERKS0_"):
            return self.build_expr(ops[0])

        if fn_name in ("_ZNK2at6Tensor10contiguousEN3c1012MemoryFormatE",
                       "_ZNK2at6Tensor4conjEv"):
            logging.warning("Not implemented yet: %s", fn_name)
            return self.build_expr(ops[0])

        if fn_name == "_ZNK2at10TensorBase3dimEv":
            return bm.Dim(self.build_expr(ops[0]))

        if fn_name == "_ZNK2at10TensorBase10ndimensionEv":
            return bm.Dim(self.build_expr(ops[0]))

        if fn_name == "_ZN3c1014maybe_wrap_dimEllb":
            # Bad implementation
            return self.build_expr(ops[0])

        if fn_name == "_ZN2at6native20_resize_output_checkIlEEbRKNS_6TensorEN3c108ArrayRefIT_EE":
            # Bad implementation
            return BoolVal(True)

        if fn_name in ("_ZNK2at10TensorBase11scalar_typeEv", "_ZNK2at10TensorBase5dtypeEv"):
            return bm.DType(self.build_expr(ops[0]))

        if fn_name == "_ZNK2at18TensorIteratorBase5dtypeEl":
            arr, idx = self.build_expr(ops[0]), self.build_expr(ops[1])
            return bm.DType(arr[idx])

        if fn_name == "_ZN2at20TensorIteratorConfig5buildEv":
            return self.build_expr(ops[0])

        if fn_name in ("_ZN2at20TensorIteratorConfig15add_const_inputERKNS_10TensorBaseE",
                       "_ZN2at20TensorIteratorConfig10add_outputERKNS_10TensorBaseE"):
            return Concat(self.build_expr(ops[0]), Unit(self.build_expr(ops[1])))

        if fn_name in ("_ZN2at20TensorIteratorConfig20check_all_same_dtypeEb",
                       "_ZN2at20TensorIteratorConfig21set_check_mem_overlapEb"):
            return self.build_expr(ops[0])

        if fn_name == "_ZN2at20TensorIteratorConfigC2Ev":
            return Empty(bm.ArgVector)

        if fn_name == "_ZNK2at10TensorBase7is_conjEv":
            return bm.IsConj(self.build_expr(ops[0]))
        if fn_name == "_ZNK2at10TensorBase9is_nestedEv":
            return bm.IsNested(self.build_expr(ops[0]))
        if fn_name == "_ZNK2at10TensorBase10is_complexEv":
            return bm.IsComplex(self.build_expr(ops[0]))
        if fn_name == "_ZNK2at10TensorBase14_is_zerotensorEv":
            return bm.IsZeroTensor(self.build_expr(ops[0]))
        if fn_name == "_ZNK2at10TensorBase6deviceEv":
            return bm.DeviceOf(self.build_expr(ops[0]))
        if fn_name == "_ZNK2at10TensorBase6layoutEv":
            return bm.LayoutOf(self.build_expr(ops[0]))
        if fn_name == "_ZNK2at10TensorBase7stridesEv":
            return bm.Strides(self.build_expr(ops[0]))
        if fn_name == "_ZNK2at10TensorBase6strideEl":
            return bm.Stride(self.build_expr(ops[0]), self.build_expr(ops[1]))
        if fn_name == "_ZNK2at10TensorBase5sizesEv":
            return bm.Sizes(self.build_expr(ops[0]))
        if fn_name == "_ZNK2at10TensorBase4sizeEl":
            return bm.Size(self.build_expr(ops[0]), self.build_expr(ops[1]))

        # Tensor clone/detach modeled as copy
        if fn_name == "_ZN2at11expand_sizeERKNS_6TensorEN3c108ArrayRefIlEEPKc":
            return self.model_expand_size(self.build_expr(ops[0]), self.build_expr(ops[1]))

        if fn_name == "makeConstantArray":
            seq_expr = Empty(bm.IntVector)
            for op in ops:
                seq_expr = Concat(seq_expr, Unit(self.build_expr(op)))
            return seq_expr

        # irange handling
        if fn_name.startswith("_ZN3c106irange"):
            start = self.build_expr(ops[0]).as_long()
            end = self.build_expr(ops[1]).as_long() if len(ops) > 1 else start
            seq_expr = Empty(bm.IntVector)
            for v in range(start, end):
                seq_expr = Concat(seq_expr, Unit(IntVal(v)))
            return seq_expr

        if fn_name.startswith("_ZNK3c1013integer_range") and "beginEv" in fn_name:
            return self.build_expr(ops[0])[0]

        if fn_name.startswith("_ZNK3c106detail16integer_iterator") and "deEv" in fn_name:
            return self.build_expr(ops[0])

        if fn_name == "_ZNK2at10TensorBase12element_sizeEv":
            return bm.ElementSize(self.build_expr(ops[0]))

        if fn_name == "_ZN3c10eqIlEEbNS_8ArrayRefIT_EES3_":
            return self.build_expr(ops[0]) == self.build_expr(ops[1])